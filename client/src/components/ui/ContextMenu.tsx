import { useState, useRef, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\n\ninterface ContextMenuItem {\n  id: string;\n  label: string;\n  icon?: React.ReactNode;\n  onClick: () => void;\n  disabled?: boolean;\n  divider?: boolean;\n  danger?: boolean;\n}\n\ninterface ContextMenuProps {\n  items: ContextMenuItem[];\n  onClose: () => void;\n  position: { x: number; y: number };\n  isOpen: boolean;\n}\n\nexport function ContextMenu({ items, onClose, position, isOpen }: ContextMenuProps) {\n  const menuRef = useRef<HTMLDivElement>(null);\n  const [adjustedPosition, setAdjustedPosition] = useState(position);\n\n  useEffect(() => {\n    if (!isOpen || !menuRef.current) return;\n\n    const menu = menuRef.current;\n    const rect = menu.getBoundingClientRect();\n    const viewportWidth = window.innerWidth;\n    const viewportHeight = window.innerHeight;\n\n    let newX = position.x;\n    let newY = position.y;\n\n    // Adjust horizontal position if menu would overflow\n    if (position.x + rect.width > viewportWidth) {\n      newX = position.x - rect.width;\n    }\n\n    // Adjust vertical position if menu would overflow\n    if (position.y + rect.height > viewportHeight) {\n      newY = position.y - rect.height;\n    }\n\n    // Ensure menu doesn't go off-screen\n    newX = Math.max(8, Math.min(newX, viewportWidth - rect.width - 8));\n    newY = Math.max(8, Math.min(newY, viewportHeight - rect.height - 8));\n\n    setAdjustedPosition({ x: newX, y: newY });\n  }, [isOpen, position]);\n\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const handleClickOutside = (event: MouseEvent) => {\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        onClose();\n      }\n    };\n\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        onClose();\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    document.addEventListener('keydown', handleEscape);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [isOpen, onClose]);\n\n  if (!isOpen) return null;\n\n  const handleItemClick = (item: ContextMenuItem) => {\n    if (!item.disabled) {\n      item.onClick();\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <div\n      ref={menuRef}\n      className=\"fixed z-50 min-w-[180px] bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg py-1\"\n      style={{\n        left: adjustedPosition.x,\n        top: adjustedPosition.y,\n      }}\n    >\n      {items.map((item, index) => {\n        if (item.divider) {\n          return (\n            <div\n              key={`divider-${index}`}\n              className=\"my-1 border-t border-gray-200 dark:border-gray-600\"\n            />\n          );\n        }\n\n        return (\n          <button\n            key={item.id}\n            onClick={() => handleItemClick(item)}\n            disabled={item.disabled}\n            className={`\n              w-full text-left px-3 py-2 text-sm flex items-center space-x-2 transition-colors\n              ${\n                item.disabled\n                  ? 'text-gray-400 dark:text-gray-500 cursor-not-allowed'\n                  : item.danger\n                  ? 'text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20'\n                  : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'\n              }\n            `}\n          >\n            {item.icon && (\n              <span className=\"flex-shrink-0\">{item.icon}</span>\n            )}\n            <span>{item.label}</span>\n          </button>\n        );\n      })}\n    </div>,\n    document.body\n  );\n}\n\n// Hook for managing context menu state\nexport function useContextMenu() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n\n  const openMenu = (event: React.MouseEvent) => {\n    event.preventDefault();\n    setPosition({ x: event.clientX, y: event.clientY });\n    setIsOpen(true);\n  };\n\n  const closeMenu = () => {\n    setIsOpen(false);\n  };\n\n  return {\n    isOpen,\n    position,\n    openMenu,\n    closeMenu,\n  };\n}